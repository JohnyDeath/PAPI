#Область License

//MIT License

//Copyright (c) 2024 Dmitrii Sidorenko

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииВМетоде

#Область РаботаСОтветом
// Добавляем заготовок в ответ
//
// Параметры:
//  ПроизвольныеЗаголовки	 - Массив - массив произвольных заголовков ответа
//  ИмяЗаголовка			 - Строка - Имя заголовка
//  ЗначениеЗаголовка		 - Строка - Значение заголовка
//
Процедура ДобавитьЗаголовокОтвета(ПроизвольныеЗаголовки, ИмяЗаголовка, ЗначениеЗаголовка) Экспорт    
	
	ПроизвольныеЗаголовки.Добавить(Новый Структура("Имя, Значение", ИмяЗаголовка, ЗначениеЗаголовка));	
	
КонецПроцедуры	

// Заполняем структуру на основании которой формируется ответ
//
// Параметры:
//  СтруктураВозврата - Структура: 
//  	ТекстОшибки			 - Строка	 		- Описание ошибки
//  	ДанныеОтвета		 - ЛюбоеЗначение 	- Данные в формате 1С
//  	Отработал			 - Булево		 	- Признак того что метод отработал или была ошибка
//
Процедура ЗаполнитьСтруктуруВозврата(СтруктураВозврата, ТекстОшибки = "", ДанныеОтвета = "", Отработал = Ложь) Экспорт   
	
	СтруктураВозврата.ТекстОшибки	= ТекстОшибки;
	СтруктураВозврата.Отработал		= Отработал;
	СтруктураВозврата.ДанныеОтвета 	= ДанныеОтвета;
	
КонецПроцедуры

#КонецОбласти


#Область Логирование

// Процедура - Запись в журнал регистрации
//
// Параметры:
//	ИмяСобытия 		- Строка - Пример: "PAPI.Методы.Логирование"
//  УровеньВажности - Строка, 
//					  ПеречислениеСсылка.PAPI_ТипЛога, 
//					  УровеньЖурналаРегистрации - Уровень важности события. Пример: УровеньЖурналаРегистрации.Информация
//	ТекстОшибки		- Строка - Текст ошибки
//	ДанныеСобытия	- ЛюбаяСсылка, 
//					  Число, 
//					  Строка, 
//					  Дата, 
//					  Булево - Данные, с которыми связано событие
//
Процедура ЗаписьВЖурналРегистрации(ИмяСобытия, УровеньВажности, ТекстОшибки, ДанныеСобытия = Неопределено) Экспорт
						
	PAPI_Логирование.ЗаписатьВЛог(ИмяСобытия, УровеньВажности, ТекстОшибки, ДанныеСобытия);					
						
КонецПроцедуры

#КонецОбласти


#Область СериализацияДесериализацияДанных

// Сериализация данных в формат JSON
//
// Параметры:
//  ВходящиеПараметры	 - Структура - Параметры формирование JSON
//  ВходныеДанные		 - ЛюбоеЗначение - Данные которые нужно перевести в JSON
// 
// Возвращаемое значение:
//  Результат - Строка - JSON
//
Функция Записать_JSON(Знач ВходныеДанные = "",Знач  ВходящиеПараметры = Неопределено) Экспорт
	
	РезультатJSON = PAPI_ОбщегоНазначенияВызовСервера.ЗаписатьДанныеВJSON(ВходящиеПараметры, ВходныеДанные);
	Если РезультатJSON.Отработал Тогда 
		Результат = РезультатJSON.Результат;
	Иначе
		
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, РезультатJSON.ТекстОшибки, "PAPI.Записать_JSON");
		
		Результат = "";	
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Десериализация строки JSON в формат данных 1С
//
// Параметры:
//  СтрокаJSON	 - Строка - Строка JSON
// 
// Возвращаемое значение:
//  Результат - ЛюбоеЗначение - Данные в формате 1С
//
Функция Прочитать_JSON(Знач СтрокаJSON = "") Экспорт
	
	РезультатJSON = PAPI_ОбщегоНазначенияВызовСервера.ЧтениеДанныхИзJSON(СтрокаJSON);
	Если РезультатJSON.Отработал Тогда 
		Результат = РезультатJSON.Результат;
	Иначе	
		
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, РезультатJSON.ТекстОшибки, "PAPI.Прочитать_JSON");	  
		
		Результат = "";	
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#КонецОбласти


#КонецОбласти
