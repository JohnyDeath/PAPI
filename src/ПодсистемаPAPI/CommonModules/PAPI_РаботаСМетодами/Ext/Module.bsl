#Область License

//MIT License

//Copyright (c) 2024 Dmitrii Sidorenko

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает ответ метода
//
// Параметры:
//  СтруктураВходныхПараметров	 - Структура:
//  	ИмяМетода 		- Строка
//  	ВерсияМетода 	- Строка
//  	ЗаголовкиЗапроса- Массив структур
//  	БазовыйURL      - Строка
//  	ОтносительныйURL- Строка
//  	ПараметрыЗапроса- Структура
//  	ТелоЗапроса		- Строка\Поток\ДвоичныеДанные (Пока только строка)
//  Метод						 - СправочикСсылка.PAPI_Методы - метод который должен быть выполнен
// 
// Возвращаемое значение:
//   Ответ - HTTPСервисОтвет 
//
Функция ПолучитьОтветМетода(СтруктураВходныхПараметров, Метод = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Метод) Тогда 
		
		Возврат PAPI_РаботаСОтветом.ЗаполнитьОтветПоКодуСообщения("Err3");
		
	КонецЕсли;
	
	ВключенПривилегированныйРежим = Ложь;
	Если Метод.Привилегированный Тогда 
		Если Не ПривилегированныйРежим() Тогда  
			ВключенПривилегированныйРежим = Истина;
			УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
		КонецЕсли;	
	КонецЕсли;	
	
	// Метод найден работаем по нему		
	СтруктураОтвет = ВыполнитьМетод(Метод, СтруктураВходныхПараметров);
	
	КодировкаОтвета = PAPI_ДанныеДляЗаполненияНастроек.ОсновнаяКодировкаОтветов();
	
	Ответ = Новый HTTPСервисОтвет(СтруктураОтвет.КодОтвета);
	
	// Заполняем заголовки добавленные программистом
	Если СтруктураОтвет.Свойство("ЗаголовкиОтвета") Тогда 
		Для Каждого СтрокаЗаголовка	Из СтруктураОтвет.ЗаголовкиОтвета Цикл 
			Если Ответ.Заголовки.Получить(СтрокаЗаголовка.Имя) = Неопределено Тогда
				Ответ.Заголовки.Вставить(СтрокаЗаголовка.Имя, СтрокаЗаголовка.Значение);
			КонецЕсли;	
		КонецЦикла;			
	КонецЕсли;
	
	Если СтруктураОтвет.Отработал Тогда
		
		Для Каждого СтрокаЗаголовка	Из Метод.ЗаголовкиОтвета Цикл
			Если Ответ.Заголовки.Получить(СтрокаЗаголовка.Заголовок) = Неопределено Тогда 
				Ответ.Заголовки.Вставить(СтрокаЗаголовка.Заголовок, СтрокаЗаголовка.Значение);
			КонецЕсли;	
		КонецЦикла;
		
		Если Метод.ТелоОтвета = Перечисления.PAPI_ТелоОтвета.Строка Тогда 
				
			Ответ.УстановитьТелоИзСтроки(СтруктураОтвет.ДанныеОтвета,КодировкаОтвета);

		ИначеЕсли Метод.ТелоОтвета = Перечисления.PAPI_ТелоОтвета.ДвоичныеДанные Тогда
			
			Ответ.УстановитьТелоИзДвоичныхДанных(СтруктураОтвет.ДанныеОтвета);
			
		ИначеЕсли Метод.ТелоОтвета = Перечисления.PAPI_ТелоОтвета.Файл Тогда
			
			Ответ.УстановитьИмяФайлаТела(СтруктураОтвет.ДанныеОтвета)
			
		Иначе 	
			
			// Не заполнено тело ответа
			Если ТипЗнч(СтруктураОтвет.ДанныеОтвета) = Тип("ДвоичныеДанные") Тогда 
				
				Ответ.УстановитьТелоИзДвоичныхДанных(СтруктураОтвет.ДанныеОтвета);
				
			Иначе
				
				Ответ.УстановитьТелоИзСтроки(СтруктураОтвет.ДанныеОтвета, КодировкаОтвета);
				
			КонецЕсли;
			
		КонецЕсли;			
		
	Иначе 
		
// TODO:Придумать шаблон возврата ошибки (Как вариант записывать в свойство "ШаблоннаяОшибка" структуры СтруктураОтвет )		
		Если СтруктураОтвет.Свойство("ШаблоннаяОшибка") Тогда
			
			Ответ.УстановитьТелоИзСтроки(СтруктураОтвет.ШаблоннаяОшибка, КодировкаОтвета);
			// Content-Type
			Если Ответ.Заголовки.Получить("Content-Type") = Неопределено Тогда 
				PAPI_ДанныеДляЗаполненияНастроек.ЗаполнитьСтандартныйЗаголовокОтвета(Ответ);
			КонецЕсли;

		Иначе 	
			Возврат PAPI_РаботаСОтветом.ЗаполнитьОтветПоКодуСообщения("MErr2");
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
	Возврат Ответ;	 
	
КонецФункции // ПолучитьОтветМетода

// Функция выполняет метод, может использоваться для отладки входящего запроса
//
// Параметры:
//  Метод						 - СправочникСсылка.PAPI_Методы - метод который должен быть выполнен
//  СтруктураВходныхПараметров	 - Структура - структура состоящая из параметров входящего запроса. см. PAPI_РаботаСВходящимиЗапросами.ПолучитьОтветНаЗапрос
//  ПараметрыМетода		- Структура	 - Структура параметров метода
// 
// Возвращаемое значение:
//  СтруктураВозврата - Структура - См. PAPI_РаботаСОтветом.ПолучитьЧистуюСтруктуруОтвета()
//		
//
Функция ВыполнитьМетод(Метод, СтруктураВходныхПараметров = Неопределено, ПараметрыМетода = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Метод) 
		И ТипЗнч(Метод) <> Тип("СправочникСсылка.PAPI_Методы") Тогда 
		
		СтруктураВозврата = PAPI_РаботаСОтветом.ПолучитьОтветОшибкуПоКодуИЯзыку("Err3");
		
		// Запись в журнал сообщения см. Справочник.PAPI_ШаблоныСообщений.Макет.СтандартныеСообщения
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Методы.ВыполнитьМетод", Перечисления.PAPI_ТипЛога.Предупреждение, СтруктураВозврата.ТекстОшибки, Метод);

		Возврат СтруктураВозврата;
		
	КонецЕсли;


	// Не удалось получить входящую структуру запроса++
	Если Не ЗначениеЗаполнено(СтруктураВходныхПараметров)
		Или ТипЗнч(СтруктураВходныхПараметров) <> Тип("Структура") Тогда
		
		СтруктураВозврата = PAPI_РаботаСОтветом.ПолучитьОтветОшибкуПоКодуИЯзыку("MErr1");
		
		// Запись в журнал сообщения см. Справочник.PAPI_ШаблоныСообщений.Макет.СтандартныеСообщения
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Методы.ВыполнитьМетод", Перечисления.PAPI_ТипЛога.Ошибка, СтруктураВозврата.ТекстОшибки, Метод);

		// Запись в РегистрСведений.PAPI_ЛогМетодов	
		Если СтруктураВходныхПараметров.ЛогироватьМетод Тогда 
			PAPI_Логирование.ЗаписатьВЛогМетодов(ТекущаяДатаСеанса(), Метод, Перечисления.PAPI_ТипЛога.Ошибка, СтруктураВозврата.ТекстОшибки);
		КонецЕсли;
		
		Возврат СтруктураВозврата;	
	КонецЕсли;	
	// Не удалось получить входящую структуру запроса--
	
	
	// Параметры для обработки основного метода
	Если ПараметрыМетода = Неопределено Тогда 
		ПараметрыМетода 	= Новый Структура;
	КонецЕсли;

	ПроизвольныеЗаголовки 	= Новый Массив;
		
	СтруктураНастройки 			= СтруктураНастроекМетода(Метод.Настройки);
	
	КодОбработкиТелаЗапроса 	= ?(СтруктураНастройки.Свойство("СВ_КодОбработкиТелаЗапроса")
								  ,СтруктураНастройки.СВ_КодОбработкиТелаЗапроса, "");
						
	КодПроизвольногоАлгоритма 	= ?(СтруктураНастройки.Свойство("СВ_КодПроизвольногоАлгоритма")
								  ,СтруктураНастройки.СВ_КодПроизвольногоАлгоритма, "");
								  
	// Структура Возврата
	СтруктураВозврата = PAPI_РаботаСОтветом.ПолучитьЧистуюСтруктуруОтвета();
					  
	// GET и TRACE обрабатываем только параметры запроса  
	Если СтруктураВходныхПараметров.МетодЗапроса = "GET"
		Или СтруктураВходныхПараметров.МетодЗапроса = "TRACE" Тогда 
							
		ПараметрыЗапроса = ?(СтруктураВходныхПараметров.Свойство("ПараметрыЗапроса"),
							СтруктураВходныхПараметров.ПараметрыЗапроса,Новый Структура);

		Если СтруктураНастройки.Свойство("СВ_ПараметрыЗапроса")
			И ТипЗнч(СтруктураНастройки.СВ_ПараметрыЗапроса) = Тип("ТаблицаЗначений") Тогда 			
									
			// Заполняем параметры
			Для Каждого Параметр Из СтруктураНастройки.СВ_ПараметрыЗапроса Цикл
									
				// Проверка, если параметр метода передан, тогда пропускаем
				Если ПараметрыМетода.Свойство(Параметр.Имя) Тогда 
					Продолжить;	
				КонецЕсли;
									
				Если ТипЗнч(Параметр.Алгоритм) = Тип("СправочникСсылка.PAPI_Алгоритмы") Тогда 
										
					влСтруктураВозврата = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(Параметр.Алгоритм, ПараметрыЗапроса);
										
					Если влСтруктураВозврата.Отработал Тогда
											
						ПараметрыМетода.Вставить(Параметр.Имя, влСтруктураВозврата.Результат);
											
					Иначе 
						
						Массив10Значений = Новый Массив;
						Массив10Значений.Добавить(Параметр.Имя);
						Массив10Значений.Добавить(Параметр.Алгоритм.ИмяАлгоритма);
						PAPI_РаботаСОтветом.ЗаполнитьСтруктуруВозвратаПоКодуОшибки(влСтруктураВозврата,"ALErr3", Массив10Значений); 
						
						// Запись в журнал сообщения см. Справочник.PAPI_ШаблоныСообщений.Макет.СтандартныеСообщения
						PAPI_Логирование.ЗаписатьВЛог("PAPI.Методы.ВыполнитьМетод", Перечисления.PAPI_ТипЛога.Ошибка, влСтруктураВозврата.ТекстОшибки, Метод);

						// Запись в РегистрСведений.PAPI_ЛогМетодов	
						Если Метод.ЛогироватьМетод Тогда
							
							PAPI_Логирование.ЗаписатьВЛогМетодов(ТекущаяДатаСеанса(), Метод, Перечисления.PAPI_ТипЛога.Ошибка, влСтруктураВозврата.ТекстОшибки);

						КонецЕсли;
				
						Возврат влСтруктураВозврата;
											
					КонецЕсли;	
										
				Иначе
										
					// Вычисляем параметр по алгоритму
					Результат = "";
					Если Не ПустаяСтрока(Параметр.Алгоритм) Тогда 									
						 
					    Выполнить_ПараметрАлгоритм(Параметр, ПараметрыЗапроса, СтруктураВозврата, Результат);
					
						Если Не СтруктураВозврата.Отработал Тогда
								
							// Запись в журнал сообщения см. Справочник.PAPI_ШаблоныСообщений.Макет.СтандартныеСообщения
							PAPI_Логирование.ЗаписатьВЛог("PAPI.Методы.ВыполнитьМетод", Перечисления.PAPI_ТипЛога.Ошибка, СтруктураВозврата.ТекстОшибки, Метод);

							// Запись в РегистрСведений.PAPI_ЛогМетодов
							Если Метод.ЛогироватьМетод Тогда
							
								PAPI_Логирование.ЗаписатьВЛогМетодов(ТекущаяДатаСеанса(), Метод, Перечисления.PAPI_ТипЛога.Ошибка, СтруктураВозврата.ТекстОшибки);

							КонецЕсли;
												
							Возврат СтруктураВозврата;

						КонецЕсли;
						
					КонецЕсли;

					ПараметрыМетода.Вставить(Параметр.Имя, Результат);
										
				КонецЕсли;	
									
			КонецЦикла;					
			
		КонецЕсли;
						
	Иначе // Обрабатываем тело запроса на основании "Код обработки тела запроса" метода
							
		Если Не ПустаяСтрока(КодОбработкиТелаЗапроса) Тогда  
			
			Выполнить_КодОбработкиТелаЗапроса(КодОбработкиТелаЗапроса, СтруктураВходныхПараметров, ПараметрыМетода, СтруктураВозврата);

			Если Не СтруктураВозврата.Отработал Тогда
							
				// Запись в журнал сообщения см. Справочник.PAPI_ШаблоныСообщений.Макет.СтандартныеСообщения
				PAPI_Логирование.ЗаписатьВЛог("PAPI.Методы.ВыполнитьМетод", Перечисления.PAPI_ТипЛога.Ошибка, СтруктураВозврата.ТекстОшибки, Метод);

				// Запись в РегистрСведений.PAPI_ЛогМетодов
				Если Метод.ЛогироватьМетод Тогда 
					PAPI_Логирование.ЗаписатьВЛогМетодов(ТекущаяДатаСеанса(), Метод, Перечисления.PAPI_ТипЛога.Ошибка, СтруктураВозврата.ТекстОшибки);
				КонецЕсли;
									
				Возврат СтруктураВозврата;
			
			КонецЕсли;
			
		КонецЕсли;	
							
	КонецЕсли;							  
								  		
	// Если метод не произвольный и алгоритм заполнен выполняем алгоритм
	Если Не Метод.ПроизвольныйАлгоритм 
		И ЗначениеЗаполнено(Метод.Алгоритм) Тогда 
							
		Результат = PAPI_РаботаСАлгоритмами.РешитьАлгоритм(Метод.Алгоритм, ПараметрыМетода);
		Если Результат.Отработал Тогда 
			СтруктураВозврата.ДанныеОтвета = Результат.Результат;
		Иначе
			
			Массив10Значений = Новый Массив;
			Массив10Значений.Добавить(Результат.ТекстОшибки);
			PAPI_РаботаСОтветом.ЗаполнитьСтруктуруВозвратаПоКодуОшибки(СтруктураВозврата, "MErr8", Массив10Значений);
			
			// Запись в журнал сообщения см. Справочник.PAPI_ШаблоныСообщений.Макет.СтандартныеСообщения
			PAPI_Логирование.ЗаписатьВЛог("PAPI.Методы.ВыполнитьМетод", Перечисления.PAPI_ТипЛога.Ошибка, СтруктураВозврата.ТекстОшибки, Метод);

			// Запись в РегистрСведений.PAPI_ЛогМетодов
			Если Метод.ЛогироватьМетод Тогда
								
				PAPI_Логирование.ЗаписатьВЛогМетодов(ТекущаяДатаСеанса(), Метод, Перечисления.PAPI_ТипЛога.Ошибка, СтруктураВозврата.ТекстОшибки);

			КонецЕсли;
								
		КонецЕсли;
							
	ИначеЕсли Метод.ПроизвольныйАлгоритм 
		И Не ПустаяСтрока(КодПроизвольногоАлгоритма) Тогда
									
		// Тут выполняем код из КодПроизвольногоАлгоритма  
		Выполнить_КодПроизвольногоАлгоритма(КодПроизвольногоАлгоритма, СтруктураВходныхПараметров, 
												ПараметрыМетода, ПроизвольныеЗаголовки, СтруктураВозврата);
		
		Если Не СтруктураВозврата.Отработал Тогда
					
			// Запись в журнал сообщения см. Справочник.PAPI_ШаблоныСообщений.Макет.СтандартныеСообщения
			PAPI_Логирование.ЗаписатьВЛог("PAPI.Методы.ВыполнитьМетод", Перечисления.PAPI_ТипЛога.Ошибка, СтруктураВозврата.ТекстОшибки, Метод);

			// Запись в РегистрСведений.PAPI_ЛогМетодов
			Если Метод.ЛогироватьМетод Тогда
								
				PAPI_Логирование.ЗаписатьВЛогМетодов(ТекущаяДатаСеанса(), Метод, Перечисления.PAPI_ТипЛога.Ошибка, СтруктураВозврата.ТекстОшибки);

			КонецЕсли;	
			
		КонецЕсли;
		
	Иначе
		
		СтруктураВозврата = PAPI_РаботаСОтветом.ПолучитьОтветОшибкуПоКодуИЯзыку("MErr9");
		
		// Запись в журнал сообщения см. Справочник.PAPI_ШаблоныСообщений.Макет.СтандартныеСообщения
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Методы.ВыполнитьМетод", Перечисления.PAPI_ТипЛога.Ошибка, СтруктураВозврата.ТекстОшибки, Метод);

		// Запись в РегистрСведений.PAPI_ЛогМетодов
		Если Метод.ЛогироватьМетод Тогда
								
			PAPI_Логирование.ЗаписатьВЛогМетодов(ТекущаяДатаСеанса(), Метод, Перечисления.PAPI_ТипЛога.Ошибка, СтруктураВозврата.ТекстОшибки);

		КонецЕсли;

		Возврат СтруктураВозврата;
		
	КонецЕсли;							        
		
	
// TODO: Нужно придумать более элегантное решение	
	// Заголовки созданные программистом
	Если ПроизвольныеЗаголовки.Количество() > 0 Тогда 
		СтруктураВозврата.Вставить("ЗаголовкиОтвета", ПроизвольныеЗаголовки);	
	КонецЕсли;	
		
	
	Возврат СтруктураВозврата;
	
КонецФункции // ВыполнитьМетод

// Поиск метода и добавление его в структуру входных параметров. (Осталось от предыдущей версии PAPI)
// Если все данные введены верно в результате в структуру будет добавлено свойство "Метод" и ссылка на метод
//
// Параметры:
//  СтруктураВходныхПараметров	 - Структура 
//  	СтруктураВходныхПараметров.ВерсияМетода 	- Версия метода.
//  	СтруктураВходныхПараметров.ИмяМетода 		- Имя метода.
//  	СтруктураВходныхПараметров.МетодЗапроса 	- Метод HTTP сервиса.
//
Процедура ПоискИДобавлениеМетодаPAPIВСтруктуру(СтруктураВходныхПараметров = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СтруктураВходныхПараметров)
		Или ТипЗнч(СтруктураВходныхПараметров) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;	
		
	Если СтруктураВходныхПараметров.Свойство("ВерсияМетода")
		И СтруктураВходныхПараметров.Свойство("ИмяМетода")
		И СтруктураВходныхПараметров.Свойство("МетодЗапроса") Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	PAPI_МетодыHTTPМетоды.Ссылка КАК Метод
			|ИЗ
			|	Справочник.PAPI_Методы.HTTPМетоды КАК PAPI_МетодыHTTPМетоды
			|ГДЕ
			|	PAPI_МетодыHTTPМетоды.HTTPМетод = &HTTPМетод
			|	И PAPI_МетодыHTTPМетоды.Ссылка.ИмяМетода = &ИмяМетода
			|	И PAPI_МетодыHTTPМетоды.Ссылка.ВерсияМетода = &ВерсияМетода
			|	И НЕ PAPI_МетодыHTTPМетоды.Ссылка.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ВерсияМетода", 	СтруктураВходныхПараметров.ВерсияМетода);
		Запрос.УстановитьПараметр("ИмяМетода", 		СтруктураВходныхПараметров.ИмяМетода);
		Запрос.УстановитьПараметр("HTTPМетод", 		СтруктураВходныхПараметров.МетодЗапроса);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Если СтруктураВходныхПараметров.Свойство("Метод") Тогда 
				СтруктураВходныхПараметров.Метод	= ВыборкаДетальныеЗаписи.Метод;
			Иначе	
				СтруктураВходныхПараметров.Вставить("Метод", ВыборкаДетальныеЗаписи.Метод);
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли; 
	
КонецПроцедуры

// Поиск метода
//
// Параметры:
//  СтруктураВходныхПараметров	 - Структура
//  	СтруктураВходныхПараметров.ВерсияМетода 	- Версия метода.
//  	СтруктураВходныхПараметров.ИмяМетода 		- Имя метода.
//  	СтруктураВходныхПараметров.МетодЗапроса 	- Метод HTTP сервиса.
// 
// Возвращаемое значение:
//  Ссылка - на метод или неопределено
//
Функция ПоискМетодаPAPI(Знач СтруктураВходныхПараметров = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(СтруктураВходныхПараметров)
		Или ТипЗнч(СтруктураВходныхПараметров) <> Тип("Структура") Тогда 
		Возврат Результат;
	КонецЕсли;	
		
	Если СтруктураВходныхПараметров.Свойство("ВерсияМетода")
		И СтруктураВходныхПараметров.Свойство("ИмяМетода")
		И СтруктураВходныхПараметров.Свойство("МетодЗапроса") Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	PAPI_МетодыHTTPМетоды.Ссылка КАК Метод
			|ИЗ
			|	Справочник.PAPI_Методы.HTTPМетоды КАК PAPI_МетодыHTTPМетоды
			|ГДЕ
			|	PAPI_МетодыHTTPМетоды.HTTPМетод = &HTTPМетод
			|	И PAPI_МетодыHTTPМетоды.Ссылка.ИмяМетода = &ИмяМетода
			|	И PAPI_МетодыHTTPМетоды.Ссылка.ВерсияМетода = &ВерсияМетода
			|	И НЕ PAPI_МетодыHTTPМетоды.Ссылка.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ВерсияМетода", 	СтруктураВходныхПараметров.ВерсияМетода);
		Запрос.УстановитьПараметр("ИмяМетода", 		СтруктураВходныхПараметров.ИмяМетода);
		Запрос.УстановитьПараметр("HTTPМетод", 		СтруктураВходныхПараметров.МетодЗапроса);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Метод;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Результат;    
	
КонецФункции

// Получаем структуру настроек справочника PAPI_Методы
//
// Параметры:
//  Настройки - ХранилищеЗначения
// 
// Возвращаемое значение:
//  СтруктураДанных - Структура
//
Функция СтруктураНастроекМетода(Знач Настройки) Экспорт 
	
	СтруктураДанных = Новый Структура;
	
	Если ТипЗнч(Настройки) = Тип("ХранилищеЗначения") Тогда 
	
		перСтруктураНастройки = Настройки.Получить();
		Если перСтруктураНастройки <> Неопределено Тогда 
			
			РезультатXML = PAPI_ОбщегоНазначенияВызовСервера.ДесериализаторXML(перСтруктураНастройки);
			СтруктураНастройки = ?(РезультатXML.Отработал, РезультатXML.Результат,Неопределено);
		
			Если СтруктураНастройки <> Неопределено Тогда 
				Если ТипЗнч(СтруктураНастройки) = Тип("Структура") Тогда 
					
#Область ЗаполняемСтруктуруДанных
					Если СтруктураНастройки.Свойство("СтруктураВычисления") Тогда 
	
						СтруктураВычисления =  СтруктураНастройки.СтруктураВычисления;
							
						Если ТипЗнч(СтруктураВычисления) = Тип("Структура") Тогда
								
							Если СтруктураВычисления.Свойство("КодОбработкиТелаЗапроса") Тогда
													
								СтруктураДанных.Вставить("СВ_КодОбработкиТелаЗапроса", СтруктураВычисления.КодОбработкиТелаЗапроса);								
								
							КонецЕсли;
								
							Если СтруктураВычисления.Свойство("КодПроизвольногоАлгоритма") Тогда
									
								СтруктураДанных.Вставить("СВ_КодПроизвольногоАлгоритма", СтруктураВычисления.КодПроизвольногоАлгоритма);	
										
							КонецЕсли;

							Если СтруктураВычисления.Свойство("ПараметрыЗапроса") Тогда
								Если ТипЗнч(СтруктураВычисления.ПараметрыЗапроса) = Тип("ТаблицаЗначений") Тогда 
									СтруктураДанных.Вставить("СВ_ПараметрыЗапроса", СтруктураВычисления.ПараметрыЗапроса);
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
							
					КонецЕсли;
#КонецОбласти		

				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формируем ПараметрыМетода на основании параметров запроса. Описание - см. ВыполнитьМетод
//
// Параметры:
//  Параметр	- СтрокаТаблицыЗначений:
// 		Имя 		- Строка - Ключ параметра
//		Алгоритм    - СправочникСсылка.PAPI_Алгоритмы, Строка - Алгоритм для вычисления значения параметра
//	ПараметрыЗапроса - Структура - Параметры из запроса URL
//  СтруктураВозврата 	- Структура
//		Код - Число - Код ошибки\ответа
//  	Отработал 	- Булево - Выполнено или нет
// 		ТекстОшибки - Строка - Текст ошибки если функция отработала с ошибкой
//		ДанныеОтвета 	- ЛюбоеЗначение - Данные в формате 1С  
//
Процедура Выполнить_ПараметрАлгоритм(Параметр, ПараметрыЗапроса, СтруктураВозврата, Результат = "")
						
	Попытка
								
		Выполнить(Параметр.Алгоритм);
												
	Исключение
							
		СтруктураВозврата.Отработал = Ложь;
							
		Массив10Значений = Новый Массив;
		Массив10Значений.Добавить(Параметр.Имя);
		Массив10Значений.Добавить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		PAPI_РаботаСОтветом.ЗаполнитьСтруктуруВозвратаПоКодуОшибки(СтруктураВозврата, "ALErr4", Массив10Значений);  
							
	КонецПопытки;	  
	
КонецПроцедуры

// Формируем ПараметрыМетода на основании тела запроса. см. ВыполнитьМетод
//
// Параметры:
//  КодОбработкиТелаЗапроса		 - Строка - Произвольный код тела запроса
//  СтруктураВходныхПараметров	 - Структура - структура состоящая из параметров входящего запроса. см. PAPI_РаботаСВходящимиЗапросами.ПолучитьОтветНаЗапрос
//  	ИмяМетода 		- Строка
//  	ВерсияМетода 	- Строка
//  	ЗаголовкиЗапроса- Массив - Содержит структуру
//  	БазовыйURL      - Строка
//  	ОтносительныйURL- Строка
//  	ПараметрыЗапроса- Структура
//  	ТелоЗапроса		- Строка\Поток\ДвоичныеДанные (Пока только строка) 
//  ПараметрыМетода	 - Структура - Входящие параметры 
//  СтруктураВозврата 	- Структура
//		Код - Число - Код ошибки\ответа
//  	Отработал 	- Булево - Выполнено или нет
// 		ТекстОшибки - Строка - Текст ошибки если функция отработала с ошибкой
//		ДанныеОтвета 	- ЛюбоеЗначение - Данные в формате 1С  
//
Процедура Выполнить_КодОбработкиТелаЗапроса(КодОбработкиТелаЗапроса, 
											СтруктураВходныхПараметров, 
											ПараметрыМетода, 
											СтруктураВозврата)
	
	Результат = ""; 	
	Попытка
									
		Выполнить(КодОбработкиТелаЗапроса);
		ПараметрыМетода = Результат;
									
	Исключение
				
		СтруктураВозврата.Отработал = Ложь;
				
		Массив10Значений = Новый Массив;
		Массив10Значений.Добавить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		PAPI_РаботаСОтветом.ЗаполнитьСтруктуруВозвратаПоКодуОшибки(СтруктураВозврата, "MErr7", Массив10Значений);	
				
	КонецПопытки; 
	
КонецПроцедуры

// Формируем СтруктураВозврата на основании кода произвольного алгоритма. см. ВыполнитьМетод
//
// Параметры:
//  КодПроизвольногоАлгоритма	 - Строка - Произвольный код тела запроса
//  СтруктураВходныхПараметров	 - Структура - структура состоящая из параметров входящего запроса. см. PAPI_РаботаСВходящимиЗапросами.ПолучитьОтветНаЗапрос
//  	ИмяМетода 		- Строка
//  	ВерсияМетода 	- Строка
//  	ЗаголовкиЗапроса- Массив - Содержит структуру
//  	БазовыйURL      - Строка
//  	ОтносительныйURL- Строка
//  	ПараметрыЗапроса- Структура
//  	ТелоЗапроса		- Строка\Поток\ДвоичныеДанные (Пока только строка) 
//  ПараметрыМетода	 - Структура - Входящие параметры   
//  ПроизвольныеЗаголовки - Массив - Массив содержащий структуры заголовков.
//  СтруктураВозврата 	- Структура 
//		Код - Число - Код ошибки\ответа
//  	Отработал 	- Булево - Выполнено или нет
// 		ТекстОшибки - Строка - Текст ошибки если функция отработала с ошибкой
//		ДанныеОтвета 	- ЛюбоеЗначение - Данные в формате 1С 
//
Процедура Выполнить_КодПроизвольногоАлгоритма(КодПроизвольногоАлгоритма, 
											СтруктураВходныхПараметров, 
											ПараметрыМетода, 
											ПроизвольныеЗаголовки, 
											СтруктураВозврата)
	
	Результат = "";   	
	Попытка
								
		Выполнить(КодПроизвольногоАлгоритма);
		СтруктураВозврата.ДанныеОтвета = Результат;
								
	Исключение        
			
		СтруктураВозврата.Отработал = Ложь;        
			
		Массив10Значений = Новый Массив; 
		Массив10Значений.Добавить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		PAPI_РаботаСОтветом.ЗаполнитьСтруктуруВозвратаПоКодуОшибки(СтруктураВозврата, "MErr8", Массив10Значений);   
			
	КонецПопытки; 
	
КонецПроцедуры


#КонецОбласти

