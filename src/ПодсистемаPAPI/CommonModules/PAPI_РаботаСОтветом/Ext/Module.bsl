#Область License

//MIT License

//Copyright (c) 2024 Dmitrii Sidorenko

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращаемое значение:
//  СтруктураОтвет - Структура
//  Отработал 		- Булево - Признак того что метод отработал или была ошибка
//  ДанныеОтвета 	- Строка - Тело ответа
//  ТекстОшибки 	- Булево - Текст ошибки, если была ошибка (Отработал = Ложь)
//  КодОтвета 		- Число  - Код возвращаемый в ответе
//
Функция ПолучитьЧистуюСтруктуруОтвета() Экспорт 
	
	СтруктураОтвет = Новый Структура("ДанныеОтвета, Отработал, ТекстОшибки, КодОтвета", "", Истина, "", 200);	
	Возврат СтруктураОтвет;
	
КонецФункции               

// Заполняем структуру ответа
//
// Параметры:
//  СтруктураОтвет	 - 			 - Структура
//  КодОтвета		 - Число	 - Код возвращаемый в ответе
//  ТекстОшибки		 - Строка	 - Текст ошибки, если была ошибка (Отработал = Ложь)
//  Отработал		 - Булево	 - Признак того, что метод отработал или была ошибка
//  ДанныеОтвета	 - ЛюбоеЗначение - Тело ответа
//
Процедура ЗаполнитьСтруктуруОтвета(СтруктураОтвет, КодОтвета, ТекстОшибки, Отработал, ДанныеОтвета) Экспорт
	
	СтруктураОтвет.КодОтвета 	= КодОтвета;
	СтруктураОтвет.ТекстОшибки	= ТекстОшибки;
	СтруктураОтвет.Отработал	= Отработал;
	СтруктураОтвет.ДанныеОтвета = ДанныеОтвета;	  
	
КонецПроцедуры

// Заполняем структуру ответа по коду ошибки
//
// Параметры:
//  Код	 - Строка	 - Код сообщения
// 
// Возвращаемое значение:
//  СтруктураОтвет - См. ПолучитьЧистуюСтруктуруОтвета()
//
Функция ПолучитьОтветОшибкуПоКодуИЯзыку(Знач Код = "") Экспорт
	
	// Получаем структуру ответа
	СтруктураОтвет = ПолучитьЧистуюСтруктуруОтвета();
	СтруктураОтвет.Отработал = Ложь;
	
	Если ПустаяСтрока(Код) Тогда 
		
		ОтветErr520 = Справочники.PAPI_ШаблоныСообщений.ПолучитьСообщение502();
		
		СтруктураОтвет.КодОтвета 	= ОтветErr520.КодСостояния;
		СтруктураОтвет.ТекстОшибки	= НСтр(ОтветErr520.Сообщение);
		Возврат СтруктураОтвет;	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫБОР
		|		КОГДА КодСостояния > 0
		|			ТОГДА КодСостояния
		|		ИНАЧЕ 520
		|	КОНЕЦ КАК КодСостояния,
		|   ТекстСообщения КАК Сообщение
		|ИЗ
		|	Справочник.PAPI_ШаблоныСообщений КАК PAPI_ШаблоныСообщений
		|ГДЕ
		|	Код = &Код
		|	И НЕ ПометкаУдаления
		|";
	Запрос.УстановитьПараметр("Код",Код);
	
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаКодСостояния
	    Если СтруктураОтвет.КодОтвета <> ВыборкаДетальныеЗаписи.КодСостояния Тогда 
			СтруктураОтвет.КодОтвета = ВыборкаДетальныеЗаписи.КодСостояния;	
		КонецЕсли;

		Если ПустаяСтрока(ВыборкаДетальныеЗаписи.Сообщение) Тогда 
			Продолжить;
		КонецЕсли;
		
		СтруктураОтвет.ТекстОшибки = НСтр(ВыборкаДетальныеЗаписи.Сообщение);

	КонецЦикла;
	
	Если СтруктураОтвет.КодОтвета 	= 520
		И ПустаяСтрока(СтруктураОтвет.ТекстОшибки) Тогда 

		ОтветErr520 = Справочники.PAPI_ШаблоныСообщений.ПолучитьСообщение502();
		
		СтруктураОтвет.ТекстОшибки	= НСтр(ОтветErr520.Сообщение);
	
	КонецЕсли;	
	
	Возврат СтруктураОтвет;
	
КонецФункции

// Заполняем структуру ответа по коду ошибки
//
// Параметры:
//  КодСообщения - Строка	 - Код сообщения
// 
// Возвращаемое значение:
//  Ответ - HTTPСервисОтвет 
//
Функция ЗаполнитьОтветПоКодуСообщения(Знач КодСообщения) Экспорт 
	
	СтруктураОтвет = ПолучитьОтветОшибкуПоКодуИЯзыку(КодСообщения);
	
// TODO: Придумать шаблон ответа.		 

	Ответ = Новый HTTPСервисОтвет(СтруктураОтвет.КодОтвета);	
	Ответ.УстановитьТелоИзСтроки(СтруктураОтвет.ТекстОшибки, PAPI_ДанныеДляЗаполненияНастроек.ОсновнаяКодировкаОтветов());
	
	// Content-Type
	Если Ответ.Заголовки.Получить("Content-Type") = Неопределено Тогда 
		PAPI_ДанныеДляЗаполненияНастроек.ЗаполнитьСтандартныйЗаголовокОтвета(Ответ);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Заполняем структуру возврата по коду ошибки
//
// Параметры:
//  СтруктураВозврата 	- Структура 
//		Код - Число - Код ошибки\ответа
//  	Отработал 	- Булево - Выполнено или нет
// 		ТекстОшибки - Строка - Текст ошибки если функция отработала с ошибкой
//		ДанныеОтвета- ЛюбоеЗначение - Данные в формате 1С 
//  Код					 - Строка	 - Код сообщения
//  Массив10Значений	 - Массив	 - будет использоваться в СтрШаблон(<Шаблон>, <Значение1-Значение10>)
//
Процедура ЗаполнитьСтруктуруВозвратаПоКодуОшибки(СтруктураВозврата, Код = "", Массив10Значений = Неопределено) Экспорт
	  
	Если Массив10Значений = Неопределено Тогда 
		Массив10Значений = Новый Массив;		
	КонецЕсли;	
		
	СтруктураВозврата.Отработал = Ложь;
	Если ПустаяСтрока(Код) Тогда
		ОтветErr520 = Справочники.PAPI_ШаблоныСообщений.ПолучитьСообщение502();
		СтруктураВозврата.ТекстОшибки = ЗаполнитьПараметрыСообщенияПоШаблону(НСтр(ОтветErr520.Сообщение), Массив10Значений);
	Иначе 	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|   ТекстСообщения КАК Сообщение
			|ИЗ
			|	Справочник.PAPI_ШаблоныСообщений
			|ГДЕ
			|	Код = &Код
			|	И НЕ ПометкаУдаления
			|";
		Запрос.УстановитьПараметр("Код", Код);
		
		
		РезультатЗапроса = Запрос.Выполнить();	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

			Если ПустаяСтрока(ВыборкаДетальныеЗаписи.Сообщение) Тогда 
				Продолжить;
			КонецЕсли;
			
			СтруктураВозврата.ТекстОшибки = ЗаполнитьПараметрыСообщенияПоШаблону(НСтр(ВыборкаДетальныеЗаписи.Сообщение), Массив10Значений);

		КонецЦикла;
		
		Если ПустаяСтрока(СтруктураВозврата.ТекстОшибки) Тогда
			ОтветErr520 = Справочники.PAPI_ШаблоныСообщений.ПолучитьСообщение502();
			СтруктураВозврата.ТекстОшибки = ЗаполнитьПараметрыСообщенияПоШаблону(НСтр(ОтветErr520.Сообщение), Массив10Значений);	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

// Заполняем параметры в сообщении
// TODO: Исправить когда появится конструкция switch case
//
// Параметры:
//  ШаблонСообщения	 - Строка	 - текст сообщения с параметрами %1..%10
//  Массив10Значений - Массив	 - массив значений для вставки их на места параметров
// 
// Возвращаемое значение:
//  ШаблонСообщения - Строка - Текст сообщения заполненным на основании массива значений
//
Функция ЗаполнитьПараметрыСообщенияПоШаблону(ШаблонСообщения, Массив10Значений) 
	
	КоличествоПараметров = Массив10Значений.Количество();
	Если КоличествоПараметров = 0 Тогда 
		
		Возврат ШаблонСообщения;
		
	Иначе

		Попытка
			Если КоличествоПараметров = 1 Тогда
				Возврат СтрШаблон(ШаблонСообщения
								,Массив10Значений[0]);	
			ИначеЕсли КоличествоПараметров = 2 Тогда
				Возврат СтрШаблон(ШаблонСообщения
								,Массив10Значений[0]
								,Массив10Значений[1]);	
			ИначеЕсли КоличествоПараметров = 3 Тогда
				Возврат СтрШаблон(ШаблонСообщения
								,Массив10Значений[0]
								,Массив10Значений[1]
								,Массив10Значений[2]);	
			ИначеЕсли КоличествоПараметров = 4 Тогда
				Возврат СтрШаблон(ШаблонСообщения
								,Массив10Значений[0]
								,Массив10Значений[1]
								,Массив10Значений[2]
								,Массив10Значений[3]);	
			ИначеЕсли КоличествоПараметров = 5 Тогда
				Возврат СтрШаблон(ШаблонСообщения
								,Массив10Значений[0]
								,Массив10Значений[1]
								,Массив10Значений[2]
								,Массив10Значений[3]
								,Массив10Значений[4]);				
			ИначеЕсли КоличествоПараметров = 6 Тогда
				Возврат СтрШаблон(ШаблонСообщения
								,Массив10Значений[0]
								,Массив10Значений[1]
								,Массив10Значений[2]
								,Массив10Значений[3]
								,Массив10Значений[4]
								,Массив10Значений[5]);	
			ИначеЕсли КоличествоПараметров = 7 Тогда
				Возврат СтрШаблон(ШаблонСообщения
								,Массив10Значений[0]
								,Массив10Значений[1]
								,Массив10Значений[2]
								,Массив10Значений[3]
								,Массив10Значений[4]
								,Массив10Значений[5]
								,Массив10Значений[6]);	
			ИначеЕсли КоличествоПараметров = 8 Тогда
				Возврат СтрШаблон(ШаблонСообщения
								,Массив10Значений[0]
								,Массив10Значений[1]
								,Массив10Значений[2]
								,Массив10Значений[3]
								,Массив10Значений[4]
								,Массив10Значений[5]
								,Массив10Значений[6]
								,Массив10Значений[7]);	
			ИначеЕсли КоличествоПараметров = 9 Тогда
				Возврат СтрШаблон(ШаблонСообщения
								,Массив10Значений[0]
								,Массив10Значений[1]
								,Массив10Значений[2]
								,Массив10Значений[3]
								,Массив10Значений[4]
								,Массив10Значений[5]
								,Массив10Значений[6]
								,Массив10Значений[7]
								,Массив10Значений[8]);	
			Иначе	
				Возврат СтрШаблон(ШаблонСообщения
								,Массив10Значений[0]
								,Массив10Значений[1]
								,Массив10Значений[2]
								,Массив10Значений[3]
								,Массив10Значений[4]
								,Массив10Значений[5]
								,Массив10Значений[6]
								,Массив10Значений[7]
								,Массив10Значений[8]
								,Массив10Значений[9]);
			КонецЕсли;
		Исключение
			Возврат ШаблонСообщения;
		КонецПопытки;	
	КонецЕсли;
	
КонецФункции	

#КонецОбласти