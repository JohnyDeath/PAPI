#Область License

//MIT License

//Copyright (c) 2024 Dmitrii Sidorenko

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

#КонецОбласти

// Выполняет запуск фоновых заданий обработки сервисов интеграции. 
//	Требует наличия права "Администрирование".
//	Не допускается запуск, если в сеансе установлены разделители.     
//
// Регламентное задание "PAPI_ИсторияДанныхОбновитьИсторию"
//
Процедура ВыполнитьОбработкуНаСервере() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("PAPI_ОбменыСервисовИнтеграцииВключены") Тогда 
		Возврат;
	КонецЕсли;	
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;

	СервисыИнтеграции.ВыполнитьОбработку(); 
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;

КонецПроцедуры

// Останавливает системные фоновые задания, обрабатывающие сервисы интеграции. 
//	Требует наличия права "Администрирование".
//	Не допускается запуск, если в сеансе установлены разделители.  
//
// Можно запускать вручную
//
Процедура ОстановитьОбработкуНаСервере() Экспорт 

	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;

	СервисыИнтеграции.ОстановитьОбработку();
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;

	
КонецПроцедуры	


// Получить активность интеграционного сервиса на сервере
//
// Параметры:
//  Сервис - Строка - Имя сервиса интеграции 
// 
// Возвращаемое значение:
//  Булево - Признак активности интеграционного сервиса
//
Функция ПолучитьАктивностьНаСервере(Знач Сервис) Экспорт 
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	Результат = СервисыИнтеграции[Сервис].ПолучитьАктивность();
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции


// Установить активность на сервере
//
// Параметры:
//  Сервис - Строка - Имя сервиса интеграции 
//  Активность	 - Булево - Признак активности сервиса интеграции
//
Процедура УстановитьАктивностьНаСервере(Сервис, Активность) Экспорт 	
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	СервисыИнтеграции[Сервис].УстановитьАктивность(Активность);	
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
КонецПроцедуры	


// Отправить сообщение в Сервисы интеграции
//
// Параметры:
//  Сервис				 - Строка - Имя сервисной интеграции 
//  Канал				 - Строка - Канал Сервисной интеграции
//  ДанныеОтправки		 - Строка - Передаваемые в теле сообщения данные
//  ПараметрыНастроек	 - Структура: 
//		ДатаУстаревания 				- Дата - Дата и время, после которого считается, 
// 											что сообщение устарело и не должно обрабатываться.
//  	ИдентификаторСообщенияЗапроса 	- УникальныйИдентификатор - Идентификатор сообщения, 
//											на которое отправляемое сообщение является ответом.
//											Можно устанавливать только при отправке, при попытке изменить
//											в полученном сообщении генерируется исключение.
//  	КодОтправителя					- Строка - Код участника интеграции, который отправил сообщение.					
//  	КодПолучателя					- Строка - Код участника интеграции, которому направляется сообщение. 
//		Параметры						- Соответствие - При отправке сообщения позволяет указать специфичный
//											для приложения набор полей, который будет использоваться 
//											получателями сообщения для его обработки.
//		ВернутьПараметры - Булево - Если истина то в результат добавляется свойство ПараметрыСообщения
//
// Возвращаемое значение:
//   Результат - Структура:
// 		Отработал - Булево - Выполнено или нет
//  	ТекстОшибки - Строка - Текст ошибки если функция отработала с ошибкой
//      ПараметрыСообщения - Структура - если ВернутьПараметры = истина тогда возвращаем 
//
Функция ОтправитьСообщение(Знач Сервис, Знач Канал, Знач ДанныеОтправки, Знач ПараметрыНастроек = Неопределено, Знач ВернутьПараметры = Ложь) Экспорт 
	
	ВозможныеПараметры = "КодОтправителя,КодПолучателя,ИдентификаторСообщенияЗапроса,Параметры";
	Результат = Новый Структура("Отработал, ТекстОшибки", Истина, "");
		
	Если Не ЗначениеЗаполнено(ПараметрыНастроек) Тогда 
		
		Результат.Отработал = Ложь;
		Результат.ТекстОшибки = НСтр("ru = 'Не заполнены параметры настроек';
									|en = 'Settings not filled'");	
		
		Возврат Результат;
		
	КонецЕсли;	  
	
	Если ТипЗнч(ПараметрыНастроек) <> Тип("Структура") Тогда
		
		Результат.Отработал = Ложь;
		Результат.ТекстОшибки = НСтр("ru = 'Передана не структура';
									|en = 'No structure passed'");	
		
		Возврат Результат;
		
	КонецЕсли;	 
	
	Если Не СервисыИнтеграции[Сервис].ПолучитьАктивность() Тогда 
		
		Результат.Отработал = Ложь;
		ТекстОшибки = НСтр("ru = 'Сервис интеграции %1 неактивен';
									|en = 'Integration service %1 is inactive'");
		Результат.ТекстОшибки 	=	СтрШаблон(ТекстОшибки, Сервис);
		
		
		Возврат Результат;	

	КонецЕсли;
	
	Попытка
	
		Если ПараметрыНастроек.Свойство("ДатаУстаревания") Тогда 
			
		    Сообщение = СервисыИнтеграции[Сервис].СоздатьСообщение(ПараметрыНастроек.ДатаУстаревания);
			
		Иначе	

		    Сообщение = СервисыИнтеграции[Сервис].СоздатьСообщение();
			
		КонецЕсли;  
		
		
		МассивПараметров = СтрРазделить(ВозможныеПараметры, ",", Ложь);
		
		Для Каждого текПараметр Из МассивПараметров Цикл 
			
			Если ПараметрыНастроек.Свойство(текПараметр) 
				И ЗначениеЗаполнено(ПараметрыНастроек[текПараметр]) Тогда 
				Сообщение[текПараметр] = ПараметрыНастроек[текПараметр];
			КонецЕсли;
		
		КонецЦикла;	
		
		Буфер = ПолучитьБуферДвоичныхДанныхИзСтроки(ДанныеОтправки);
		
		Тело = Сообщение.ПолучитьТелоКакПоток();
		Тело.Записать(Буфер, 0, Буфер.Размер);
		Тело.Закрыть();
			
		Сообщение.Параметры.Вставить("РазмерСообщения", Буфер.Размер); 	
		
		СервисыИнтеграции[Сервис][Канал].ОтправитьСообщение(Сообщение);
		
	Исключение
		
		Результат.Отработал = Ложь;
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());	
				
	КонецПопытки;	
	
	Если ВернутьПараметры
		И Результат.Отработал Тогда 
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("ДатаОтправки", 	Сообщение.ДатаОтправки);
		ПараметрыСообщения.Вставить("ДатаУстаревания",	Сообщение.ДатаУстаревания);
		ПараметрыСообщения.Вставить("Идентификатор",	Сообщение.Идентификатор);
		ПараметрыСообщения.Вставить("ИдентификаторСообщенияЗапроса", Сообщение.ИдентификаторСообщенияЗапроса);
		ПараметрыСообщения.Вставить("КодОтправителя", 	Сообщение.КодОтправителя);
		ПараметрыСообщения.Вставить("КодПолучателя",	Сообщение.КодПолучателя);
		ПараметрыСообщения.Вставить("Параметры",		Сообщение.Параметры);		

		Результат.Вставить("ПараметрыСообщения", ПараметрыСообщения);
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

