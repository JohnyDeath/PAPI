#Область License

//MIT License

//Copyright (c) 2024 Dmitrii Sidorenko

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

#КонецОбласти

#Область ФоновыеЗадания

// Процедура - Выполнить обновление истории данных
// Регламентное задание "PAPI_ИсторияДанныхОбновитьИсторию"
//
Процедура ОбновитьИсториюНаСервере() Экспорт 
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;

	ИсторияДанных.ОбновитьИсторию(); 
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;

КонецПроцедуры

// Процедура - Выполнить обработку после записи версий на сервере
// Регламентное задание "PAPI_ИсторияДанныхВыполнитьОбработкуПослеЗаписиВерсий"
//
Процедура ВыполнитьОбработкуПослеЗаписиВерсийНаСервере() Экспорт 	
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	ИсторияДанных.ВыполнитьОбработкуПослеЗаписиВерсий();
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

// Процедура - Удалить из обработки после записи версий
//
// Параметры:
//  Данные			 - ЛюбаяСсылка - Данные, по которым удаляется версия 
//  ВерсияУдаления	 - Число, Массив - По какую версию удаляем из обработки после записи версий 
//
Процедура УдалитьИзОбработкиПослеЗаписиВерсий(Данные, ВерсияУдаления = Неопределено) Экспорт
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;

	// Удаляем из "Пост обработки" [_DataHistoryAfterWriteQueue]    
	Если ТипЗнч(ВерсияУдаления) = Тип("Число") Тогда 
		
		МассивВерсий = Новый Массив;
		МассивВерсий.Добавить(ВерсияУдаления);     
		
	ИначеЕсли ТипЗнч(ВерсияУдаления) = Тип("Массив") Тогда 
		
		МассивВерсий = ВерсияУдаления;
		
	Иначе 
		
		МассивВерсий = Новый Массив;
		МассивВерсий.Добавить(Неопределено);
		
	КонецЕсли;	
	
	Для Каждого ЭлМассива Из МассивВерсий Цикл 	
		ИсторияДанных.УдалитьИзОбработкиПослеЗаписиВерсий(Данные, ЭлМассива); 
	КонецЦикла;	
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;	
	
КонецПроцедуры	

// Процедура - Включить\выключить обработку после записи версии
//
// Параметры:
//  Источник -  ПланВидовРасчетаОбъект, 
//				БизнесПроцессОбъект,
//				ПланСчетовОбъект,
//				ПланВидовХарактеристикОбъект,
//				ПланОбменаОбъект, 
//				БизнесПроцессОбъект, 
//				КонстантаМенеджерЗначения, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект,
//				РегистрСведенийНаборЗаписей - Объект для которого включается\выключается запись в очередь после записи объекта.
//  ВключитьОбработчик	 - Булево - Определяет, добавляется ли информация о записи версии в очередь обработки после записи. 
//	Очередь обрабатывается при вызове метода ВыполнитьОбработкуПослеЗаписиВерсий:
//		Истина - информация добавляется.
//		Ложь - информация не добавляется.
//
Процедура ВключитьОбработкуПослеЗаписиВерсии(Источник, ВключитьОбработчик = Истина) Экспорт 
	
	Источник.ЗаписьИсторииДанных.ВыполнятьОбработкуПослеЗаписиВерсии = ВключитьОбработчик;
	
КонецПроцедуры	     

// Процедура - Включить\выключить Создать версию сразу после записи
//
// Параметры:
//  Источник -  ПланВидовРасчетаОбъект, 
//				БизнесПроцессОбъект,
//				ПланСчетовОбъект,
//				ПланВидовХарактеристикОбъект,
//				ПланОбменаОбъект, 
//				БизнесПроцессОбъект, 
//				КонстантаМенеджерЗначения, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект,
//				РегистрСведенийНаборЗаписей - Объект для которого включается\выключается запись в очередь после записи объекта.
//  ВключитьОбработчик	 - Булево - Определяет, добавляется ли информация о записи версии в очередь обработки после записи. 
//	Очередь обрабатывается при вызове метода ВыполнитьОбработкуПослеЗаписиВерсий:
//		Истина - информация добавляется.
//		Ложь - информация не добавляется.
//
Процедура ВключитьОбновлятьИсториюСразуПослеЗаписи(Источник, ВключитьОбработчик = Истина) Экспорт 
	
	Источник.ЗаписьИсторииДанных.ОбновлятьИсториюСразуПослеЗаписи = ВключитьОбработчик;
	
КонецПроцедуры


// Процедура - Добавляет данные и представление данных в параметры записи истории данных.
//
// Параметры:
//  Источник -  ПланВидовРасчетаОбъект, 
//				БизнесПроцессОбъект,
//				ПланСчетовОбъект,
//				ПланВидовХарактеристикОбъект,
//				ПланОбменаОбъект, 
//				БизнесПроцессОбъект, 
//				КонстантаМенеджерЗначения, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект,
//				РегистрСведенийНаборЗаписей - Объект для которого добавляются дополнительные данные.
//  Имя				 - Строка - Имя добавляемого поля или табличной части.
//  Значение		 - Произвольный - Значение добавляемого поля или табличной части. 
//  Представление	 - Соответствие, Строка - Если передана строка, то представление, используемое по умолчанию. При отсутствии представления на необходимом языке, поведение отлично от конфигуратора, в котором нет возможности указать представление, используемое по умолчанию.
//		Если передано соответствие, то представления на различных языках, где:
//			Ключ - код языка,
//			Значение - представление.
//
Процедура ДобавитьДополнительныеДанные(Источник, Имя, Значение, Представление) Экспорт
	
    Источник.ЗаписьИсторииДанных.ДобавитьДополнительныеДанные(Имя, Значение, Представление);  
	
КонецПроцедуры

// Процедура - Добавляет представление поля дополнительных данных в запись истории данных.
//
// Параметры:
//  Источник -  ПланВидовРасчетаОбъект, 
//				БизнесПроцессОбъект,
//				ПланСчетовОбъект,
//				ПланВидовХарактеристикОбъект,
//				ПланОбменаОбъект, 
//				БизнесПроцессОбъект, 
//				КонстантаМенеджерЗначения, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект,
//				РегистрСведенийНаборЗаписей - Объект для которого добавляется представление.
//  Имя			  - Строка - Имя добавляемого поля или табличной части
//  КодЯзыка	  - Строка - Код языка, на котором добавляется представление.
//  Представление - Строка - Представление на указанном языке.
//
Процедура ДобавитьПредставлениеПоляДополнительныхДанных(Источник, Имя, Представление, КодЯзыка = Неопределено) Экспорт 
	
	Если ЗначениеЗаполнено(КодЯзыка) Тогда 
		Источник.ЗаписьИсторииДанных.ДобавитьПредставлениеПоляДополнительныхДанных(Имя, КодЯзыка, Представление);
	Иначе
		Источник.ЗаписьИсторииДанных.ДобавитьПредставлениеПоляДополнительныхДанных(Имя, Представление); 
	КонецЕсли;	   
	
КонецПроцедуры	


// Функция - Получить признак включена история данных или нет
//
// Параметры:
//  ТипДанных - Строка - Тип Метаданных. Пример: "Документы"
//	ИмяОбъекта- Строка - Имя объекта метаданных. Пример: "ПриобретениеТоваровУслуг" 
// 
// Возвращаемое значение:
//  Булево
//
Функция ИсторияДанныхВключена(Знач ТипДанных, Знач ИмяОбъекта) Экспорт 
	
	Результат = Ложь; 
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;

	Если ЗначениеЗаполнено(ТипДанных) И ЗначениеЗаполнено(ИмяОбъекта) Тогда 
				
		Попытка
			
			текНастройки = ИсторияДанных.ПолучитьНастройки(Метаданные[ТипДанных][ИмяОбъекта]);
			
			Если текНастройки = Неопределено Тогда 

				ИспользованиеИсторииДанныхВключено = Метаданные.СвойстваОбъектов.ИспользованиеИсторииДанных.Использовать; 	
				Результат = ?(Метаданные[ТипДанных][ИмяОбъекта].ИсторияДанных = ИспользованиеИсторииДанныхВключено, Истина, Ложь);
				
			Иначе

				Результат = текНастройки.Использование; 
	
			КонецЕсли;
	
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "PAPI_ИсторияДанных.ИсторияДанныхВключена"); 
			
		КонецПопытки;	
		                                                                 
	КонецЕсли;
		
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	
	

#Область РаботаСВерсиями


// Процедура - Произвести запись версии
//
// Параметры:
//  Данные 	 -  БизнесПроцессОбъект, 
//				ПланВидовРасчетаОбъект, 
//				ПланСчетовОбъект, 
//				ПланВидовХарактеристикОбъект, 
//				ПланОбменаОбъект,
//				РегистрСведенийНаборЗаписей,
//				КонстантаМенеджерЗначения, 
//				СправочникОбъект, 
//				ЗадачаОбъект, 
//				ДокументОбъект - Объект конфигурации по которому будет создана версия  
//  ВидИзменения - Строка - "Добавление" или "Изменение" или "Удаление"
//
Процедура ЗаписатьВерсию(Данные, ВидИзменения = "Изменение", Комментарий = "Версия записана вручную") Экспорт  
	
	ДатаСоздания 				= ТекущаяДатаСеанса(); 
	
	ТекущийПользователь 		= ПользователиИнформационнойБазы.ТекущийПользователь() ;    

	// TODO: Нужна ли проверка на то, что выключена История данных?	 
	ИсторияДанных.ЗаписатьВерсию(Данные, 
								ДатаСоздания, 
								ТекущийПользователь.УникальныйИдентификатор, 
								ТекущийПользователь.Имя, 
								ТекущийПользователь.ПолноеИмя, 
								ВидИзмененияДанных[ВидИзменения], 
								Комментарий);   
								
КонецПроцедуры
	
#КонецОбласти	



