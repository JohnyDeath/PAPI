#Область License

//MIT License

//Copyright (c) 2024 Dmitrii Sidorenko

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

#КонецОбласти


#Область ПрограммныйИнтерфейс

// Логирование Алгоритмов (РегистрыСведений.PAPI_ЛогАлгоритмов)
// Параметры:
//  ДатаВремя - Дата и время записи
//  Алгоритм - Выполняемый алгоритм
//  ТипЛога - Статус (Тип сообщения)
//  Информация - Текст лога
Процедура ЗаписатьВЛогАлгоритмов(ДатаВремя
								,Алгоритм	= Неопределено
								,ТипЛога	= Неопределено
								,Информация	= "") Экспорт
								
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;	
							
	ТекДата = ?(Не ЗначениеЗаполнено(ДатаВремя),ТекущаяДатаСеанса(),ДатаВремя);
	Если Не ЗначениеЗаполнено(Алгоритм) Тогда 
		Алгоритм = Справочники.PAPI_Алгоритмы.ПустаяСсылка();	
	КонецЕсли;	 
	
	Если Не ЗначениеЗаполнено(ТипЛога) Тогда 
		ТипЛога = Перечисления.PAPI_ТипЛога.Примечание;
	КонецЕсли;	
	
	БылаОшибка = Ложь;
	Попытка 
				
		НаборЗаписей = РегистрыСведений.PAPI_ЛогАлгоритмов.СоздатьНаборЗаписей();  			
		НаборЗаписей.Отбор.ДатаВремя.Установить(ТекДата);
		НаборЗаписей.Отбор.Алгоритм.Установить(Алгоритм);
		НаборЗаписей.Отбор.ТипЛога.Установить(ТипЛога);
		НаборЗаписей.Прочитать();	
        
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗаписьРегистра = НаборЗаписей.Добавить();

			НоваяЗаписьРегистра.ДатаВремя 		= ТекДата;
			НоваяЗаписьРегистра.Алгоритм 		= Алгоритм;
			НоваяЗаписьРегистра.ТипЛога 		= ТипЛога;
			
		Иначе
			НоваяЗаписьРегистра = НаборЗаписей[0];
		КонецЕсли;
				
		НоваяЗаписьРегистра.Информация = Информация;
		
		НаборЗаписей.Записать();
						
	Исключение	
		
		БылаОшибка = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Если БылаОшибка Тогда  
		
		ЗаписатьВЛог("PAPI.Логирование.Алгоритмы", ТипЛога, ТекстОшибки, Алгоритм);
			
	КонецЕсли;	
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
КонецПроцедуры

// Логирование Методов (РегистрыСведений.PAPI_ЛогМетодов)
// Параметры:
//  ДатаВремя - Дата и время записи
//  Метод - Выполняемый метод
//  ТипЛога - Статус (Тип сообщения)
//  Информация - Текст лога
Процедура ЗаписатьВЛогМетодов(ДатаВремя
							,Метод		= Неопределено				
							,ТипЛога	= Неопределено 
							,Информация	= "") Экспорт
							
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;						
							
	ТекДата = ?(Не ЗначениеЗаполнено(ДатаВремя),ТекущаяДатаСеанса(),ДатаВремя);
	Если Не ЗначениеЗаполнено(Метод) Тогда 
		Метод = Справочники.PAPI_Методы.ПустаяСсылка();	
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(ТипЛога) Тогда 
		ТипЛога = Перечисления.PAPI_ТипЛога.Примечание;
	КонецЕсли;	
	
	БылаОшибка = Ложь;
	Попытка	
		
		НаборЗаписей = РегистрыСведений.PAPI_ЛогМетодов.СоздатьНаборЗаписей();  			
		НаборЗаписей.Отбор.ДатаВремя.Установить(ТекДата);
		НаборЗаписей.Отбор.Метод.Установить(Метод);
		НаборЗаписей.Отбор.ТипЛога.Установить(ТипЛога);
		НаборЗаписей.Прочитать();	

		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗаписьРегистра = НаборЗаписей.Добавить();
			
			НоваяЗаписьРегистра.ДатаВремя 	= ТекДата;
			НоваяЗаписьРегистра.Метод 		= Метод;
			НоваяЗаписьРегистра.ТипЛога 	= ТипЛога;	
		Иначе
			НоваяЗаписьРегистра = НаборЗаписей[0];
		КонецЕсли;
				
		НоваяЗаписьРегистра.Информация = Информация;
		
		НаборЗаписей.Записать(); 
					
	Исключение	
		
		БылаОшибка = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
	КонецПопытки;
	
	Если БылаОшибка Тогда 
		
        ЗаписатьВЛог("PAPI.Логирование.Методы", ТипЛога, ТекстОшибки, Метод);

	КонецЕсли;
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;

КонецПроцедуры

// Логирование входящего запроса (Документы.PAPI_ВходящийЗапрос)
// Параметры:
//  Метод - метод из запроса
//  ТелоЗапроса - Тело запроса
//  СтруктураВходящихПараметров - структура полученная на основании запроса
Процедура ЗаписатьВходящийЗапрос(Метод, ТелоЗапроса, СтруктураВходящихПараметров) Экспорт 
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;
	
	ТекДата = ТекущаяДатаСеанса();
	
	НовыйЗапрос 		= Документы.PAPI_ВходящийЗапрос.СоздатьДокумент();
	НовыйЗапрос.Дата 	= ТекДата;
	НовыйЗапрос.Метод 	= Метод;
			
	Если ТелоЗапроса <> Неопределено Тогда 
		НовыйЗапрос.ТелоЗапроса 	= Новый ХранилищеЗначения(ТелоЗапроса);
		НовыйЗапрос.ЕстьТелоЗапроса = Истина;
	КонецЕсли;
		
	ВходящиеПараметры 				= PAPI_ОбщегоНазначенияВызовСервера.СтандартныеПараметрыJSON();
	ВходящиеПараметры.ПереносСтрок	= ПереносСтрокJSON.Авто;	
	РезультатJS = PAPI_ОбщегоНазначенияВызовСервера.ЗаписатьДанныеВJSON(ВходящиеПараметры, СтруктураВходящихПараметров);
			
	НовыйЗапрос.Запрос	= ?(РезультатJS.Отработал, РезультатJS.Результат, РезультатJS.ТекстОшибки);
		
	// НовыйЗапрос.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	// НовыйЗапрос.ДополнительныеСвойства.Вставить("PAPI_ОтключитьРегистрациюОбъекта");
	
	НовыйЗапрос.УстановитьНовыйНомер();
	
	НовыйЗапрос.ОбменДанными.Загрузка = Истина;
	
	БылаОшибка = Ложь;	
	Попытка 

		НовыйЗапрос.Записать(); 
			
	Исключение
		
		БылаОшибка = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Если БылаОшибка Тогда 
		
        ЗаписатьВЛог("PAPI.Логирование.ВходящийЗапрос", УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		
	КонецЕсли;	
	
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;

КонецПроцедуры	

// Процедура - Записать в журнал регистрации
//
// Параметры:
//  ИмяСобытия		- Строка - Пример: "ИнформационнаяБаза.ОбновлениеИБ"
//	ТекстОшибки		- Строка - Текст ошибки 
//  УровеньВажности - Строка, 
//					  ПеречислениеСсылка.PAPI_ТипЛога, 
//					  УровеньЖурналаРегистрации - Уровень важности события. Пример: УровеньЖурналаРегистрации.Информация
//	ДанныеСобытия	- ЛюбаяСсылка, 
//					  Число, 
//					  Строка, 
//					  Дата, 
//					  Булево - Данные, с которыми связано событие
//
Процедура ЗаписатьВЛог(ИмяСобытия = "PAPI", УровеньВажности, ТекстОшибки, ДанныеСобытия = Неопределено) Экспорт 

	Если Не ЗначениеЗаполнено(ИмяСобытия) Тогда 
		ИмяСобытия = "PAPI";	
	КонецЕсли;	
	
	Если СтрНайти(ВРег(ИмяСобытия), "PAPI") = 0 Тогда
	    ИмяСобытия = "PAPI." + ИмяСобытия;
	КонецЕсли;   
	
	перУровеньВажности = ПолучитьУровеньЖурналаРегистрации(УровеньВажности);
	
	ЗаписьВЖурналРегистрацииБезОбъектаИМетаданных(ИмяСобытия, перУровеньВажности, ТекстОшибки, ДанныеСобытия);
	
КонецПроцедуры

#Область РаботаСЖурналомРегистрации

// Процедура - Запись в журнал регистрации без объекта и метаданных
//
// Параметры:
//	ИмяСобытия 		- Строка - Пример: "ИнформационнаяБаза.ОбновлениеИБ"
//  УровеньВажности - УровеньЖурналаРегистрации - Уровень важности события. Пример: УровеньЖурналаРегистрации.Информация
//	ТекстОшибки		- Строка - Текст ошибки
//	ДанныеСобытия	-   ЛюбаяСсылка, 
//						Число, 
//						Строка, 
//						Дата, 
//						Булево - Данные, с которыми связано событие
//   
Процедура ЗаписьВЖурналРегистрацииБезОбъектаИМетаданных(ИмяСобытия, УровеньВажности, ТекстОшибки, ДанныеСобытия = Неопределено) Экспорт

	Если ЗначениеЗаполнено(ДанныеСобытия) Тогда 
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньВажности,, ДанныеСобытия, ТекстОшибки); 
		
	Иначе 

		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньВажности,,, ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры	

// Процедура - Запись в журнал регистрации без объекта и метаданных
//
// Параметры:
//	ИмяСобытия 		-   Строка - Пример: "ИнформационнаяБаза.ОбновлениеИБ"
//	ТекстОшибки		-   Строка - Текст ошибки
//	ДанныеСобытия	-   ЛюбаяСсылка, 
//						Число, 
//						Строка, 
//						Дата, 
//						Булево - Данные, с которыми связано событие
// 
Процедура ЗаписьВЖурналРегистрацииОшибки(ИмяСобытия, ТекстОшибки, ДанныеСобытия = Неопределено) Экспорт  
	
	Если ЗначениеЗаполнено(ДанныеСобытия) Тогда 
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,, ДанныеСобытия, ТекстОшибки); 
		
	Иначе 
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции  

// Функция - Получить уровень журнала регистрации
//
// Параметры:
//  ТипЛога	 -  Строка, 
//				ПеречислениеСсылка.PAPI_ТипЛога, 
//				УровеньЖурналаРегистрации - Тип записи для журнала регистрации
// 
// Возвращаемое значение:
//  УровеньЖурналаРегистрации - Тип записи журнала регистрации (Ошибка, Предупреждение, Примечание, Информация) 
//
Функция ПолучитьУровеньЖурналаРегистрации(Знач ТипЛога = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ТипЛога) Тогда
		
		Возврат УровеньЖурналаРегистрации.Примечание;
		
	КонецЕсли;
	
	Если ТипЗнч(ТипЛога) = Тип("ПеречислениеСсылка.PAPI_ТипЛога") Тогда 
		
		Если ТипЛога = Перечисления.PAPI_ТипЛога.Ошибка Тогда  
			
			Возврат УровеньЖурналаРегистрации.Ошибка;
			
		ИначеЕсли ТипЛога = Перечисления.PAPI_ТипЛога.Предупреждение Тогда 
			
			Возврат УровеньЖурналаРегистрации.Предупреждение; 
			
		ИначеЕсли ТипЛога = Перечисления.PAPI_ТипЛога.Информация Тогда 
			
			Возврат УровеньЖурналаРегистрации.Информация;
			
		Иначе      
			
			Возврат УровеньЖурналаРегистрации.Примечание; 
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТипЛога) = Тип("Строка") Тогда	
		
		Если ВРег(ТипЛога) = ВРег("Ошибка") Тогда   
			
			Возврат УровеньЖурналаРегистрации.Ошибка;  
			
		ИначеЕсли ВРег(ТипЛога) = ВРег("Предупреждение") Тогда  
			
			Возврат УровеньЖурналаРегистрации.Предупреждение;
			
		ИначеЕсли ВРег(ТипЛога) = ВРег("Информация") Тогда
			
			Возврат УровеньЖурналаРегистрации.Информация;
			
		Иначе                                           
			
			Возврат УровеньЖурналаРегистрации.Примечание;   
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТипЛога) = Тип("УровеньЖурналаРегистрации") Тогда 	
		
		Возврат ТипЛога; 
		
	Иначе
		
		Возврат УровеньЖурналаРегистрации.Примечание;
		
	КонецЕсли;	
				
КонецФункции	
	
#КонецОбласти
