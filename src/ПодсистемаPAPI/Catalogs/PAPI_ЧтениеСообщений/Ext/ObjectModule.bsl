
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий 

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	 
	Если Не ЭтоГруппа Тогда  
		Если Не ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры     

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ТекстОшибки = ПроверитьУникальностьЭлементов();
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		
		Отказ = Истина;
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Поле 	= "Объект.ТипСообщения";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Стандартный = Ложь;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Контролирует уникальность элемента в базе.
//
//  Возвращаемое значение:
//      Текст ошибки.
//
Функция ПроверитьУникальностьЭлементов()
	
	Результат = "";	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.PAPI_ЧтениеСообщений
		|ГДЕ 
		|	Отправитель = &Отправитель И 
		|	ТипСообщения = &ТипСообщения И 	
		|	Ссылка <> &Ссылка
		|");
	Запрос.УстановитьПараметр("Ссылка",     	Ссылка);
	Запрос.УстановитьПараметр("ТипСообщения", 	ТипСообщения);
	Запрос.УстановитьПараметр("Отправитель", 	Отправитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда 
		
		ТекстОшибки =	НСтр("ru = 'Тип сообщения с идентификатором %1 уже существует';
						|en = 'Message type with ID %1 already exists'");  
		Результат	=  СтрШаблон(ТекстОшибки, Строка(ТипСообщения));  
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти



#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'; en = 'Invalid object call on the client.'");
#КонецЕсли