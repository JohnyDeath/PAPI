#Область СлужебныеПроцедурыИФункции
// Процедура добавляет запись в регистр по переданным значениям структуры.
//
// Параметры:
//  СтруктураЗаписи	 - Структура - см. PAPI_ОчередьАлгоритмовДляФоновогоВыполнения.ПолучитьСтруктуруПоУмолчанию()
// 
// Возвращаемое значение:
//  Результат - Булево
//
Функция ДобавитьИзменитьЗапись(СтруктураЗаписи) Экспорт

	Результат = Ложь;
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;	
	
	Если ТипЗнч(СтруктураЗаписи) = Тип("Структура") Тогда
		
		СтруктураРегистраПоУмолчанию = ПолучитьСтруктуруПоУмолчанию();
		
		НаборЗаписей = РегистрыСведений.PAPI_ОчередьАлгоритмовДляФоновогоВыполнения.СоздатьНаборЗаписей();  			
		НаборЗаписей.Отбор.Алгоритм.Установить(СтруктураЗаписи.Алгоритм);
		
		НаборЗаписей.Отбор.КлючПоиска.Установить(?(СтруктураЗаписи.Свойство("КлючПоиска"),
												СтруктураЗаписи.КлючПоиска, СтруктураРегистраПоУмолчанию.КлючПоиска));

		НаборЗаписей.Прочитать();

		Если НаборЗаписей.Количество() <= 1 Тогда 
			
			Если НаборЗаписей.Количество() = 0 Тогда
				НоваяЗаписьРегистра = НаборЗаписей.Добавить();
				
				// Проверить работает ли ФЗ если да старое ФЗ надо остановить ???
				
			Иначе
				
				НоваяЗаписьРегистра = НаборЗаписей[0];  
				
			КонецЕсли;
			
			Для Каждого элСтруктурыЗаписи Из СтруктураРегистраПоУмолчанию Цикл 
				
				Если ВРег(элСтруктурыЗаписи.Ключ) = ВРег("ПараметрыАлгоритма") Тогда

					НоваяЗаписьРегистра.ПараметрыАлгоритма = ?(СтруктураЗаписи.Свойство("ПараметрыАлгоритма"),
												Новый ХранилищеЗначения(СтруктураЗаписи.ПараметрыАлгоритма),
												Новый ХранилищеЗначения(элСтруктурыЗаписи.Значение));
														
				ИначеЕсли ВРег(элСтруктурыЗаписи.Ключ) = ВРег("Выполнен") Тогда
														
					НоваяЗаписьРегистра.Выполнен = ?(СтруктураЗаписи.Свойство("Выполнен"),
												СтруктураЗаписи.Выполнен, элСтруктурыЗаписи.Значение); 
														
					Если НоваяЗаписьРегистра.Выполнен Тогда 									
						НоваяЗаписьРегистра.КоличествоПопыток = 0;
					КонецЕсли;
					
				ИначеЕсли ВРег(элСтруктурыЗаписи.Ключ) = ВРег("Ошибка") Тогда
														
					НоваяЗаписьРегистра.Ошибка = ?(СтруктураЗаписи.Свойство("Ошибка"),
												СтруктураЗаписи.Ошибка, элСтруктурыЗаписи.Значение); 
													
					Если НоваяЗаписьРегистра.Ошибка Тогда 									
						НоваяЗаписьРегистра.КоличествоПопыток = НоваяЗаписьРегистра.КоличествоПопыток + 1;
					КонецЕсли;   
					
				Иначе

					НоваяЗаписьРегистра[элСтруктурыЗаписи.Ключ] = ?(СтруктураЗаписи.Свойство(элСтруктурыЗаписи.Ключ),
												СтруктураЗаписи[элСтруктурыЗаписи.Ключ], элСтруктурыЗаписи.Значение);	
				КонецЕсли;	
				
			КонецЦикла;
			
			Попытка
				НаборЗаписей.Записать();
				Результат = Истина;
			Исключение

				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
				PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_ОчередьАлгоритмовДляФоновогоВыполнения");						
					
			КонецПопытки;	
				
		Иначе
			
			ТекстОшибки = НСтр("ru = 'Найдено более одной записи'; en = 'More than one entry found'");		
			PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_ОчередьАлгоритмовДляФоновогоВыполнения");
				
		КонецЕсли;	
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Запись не является Структурой'; en = 'Record is not a Structure'");		
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_ОчередьАлгоритмовДляФоновогоВыполнения");

	КонецЕсли;
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
	Возврат Результат;  
	
КонецФункции

// Функция - Структура для записи в регистр "PAPI_ОчередьАлгоритмовДляФоновогоВыполнения"
//
// Возвращаемое значение:
//  СтруктураРегистра - Структура:
//		Алгоритм			- СправочникСсылка.PAPI_Алгоритмы
//		КлючПоиска			- Строка - Ключ для поиска результата   
//		ПараметрыАлгоритма	- Структура - Параметры передаваемые в алгоритм   
//		Выполнен			- Булево - Признак того, что алгоритм выполнен или нет
//		Ошибка				- Булево - Признак того, что при выполнении была ошибка
//		ТекстОшибки			- Строка - Описание произошедшей ошибки в ходе выполнения алгоритма 
//		ДатаНачала			- Дата - время начала выполнения алгоритма в фоновом задании
//		ДатаОкончания 		- Дата - время окончания выполнения алгоритма в фоновом задании
//		КоличествоПопыток 	- Число - количество попыток приводивших к ошибке
//
Функция ПолучитьСтруктуруПоУмолчанию() Экспорт
	
	СтруктураРегистра = Новый Структура;
	СтруктураРегистра.Вставить("Алгоритм",			Справочники.PAPI_Алгоритмы.ПустаяСсылка());
	СтруктураРегистра.Вставить("КлючПоиска",			"");
	СтруктураРегистра.Вставить("ПараметрыАлгоритма",	Новый Структура);
	СтруктураРегистра.Вставить("Выполнен",			Ложь);
	СтруктураРегистра.Вставить("Ошибка",				Ложь);
	СтруктураРегистра.Вставить("ТекстОшибки",		"");
	СтруктураРегистра.Вставить("ДатаНачала",			'00010101000000');
	СтруктураРегистра.Вставить("ДатаОкончания",		'00010101000000');
	// СтруктураРегистра.Вставить("КоличествоПопыток",	0); //Проверяем свойство "Ошибка" и "Выполнен"
	
	Возврат СтруктураРегистра;
КонецФункции	


// Чистим регистр от старых данных
//
// Параметры:
//  КлючПоиска	- Строка - Ключ поиска результата
//
Процедура УдалитьЗаписиРегистра(КлючПоиска) Экспорт 
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;						
				
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	PAPI_ОчередьАлгоритмовДляФоновогоВыполнения.КлючПоиска КАК КлючПоиска
		|ИЗ
		|	РегистрСведений.PAPI_ОчередьАлгоритмовДляФоновогоВыполнения КАК PAPI_ОчередьАлгоритмовДляФоновогоВыполнения
		|ГДЕ
		|	PAPI_ОчередьАлгоритмовДляФоновогоВыполнения.КлючПоиска ПОДОБНО &КлючПоиска";
	
	Запрос.УстановитьПараметр("КлючПоиска", КлючПоиска + "%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.PAPI_ОчередьАлгоритмовДляФоновогоВыполнения.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.КлючПоиска.Установить(КлючПоиска); 
		НаборЗаписей.Записать();

	КонецЦикла;   
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти