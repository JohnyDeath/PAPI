// Добавить или изменяет запись регистра
//
// Параметры:
//  СтруктураЗаписиРегистра	 - Структура - Необходимая структура для записи в регистр
// 
// Возвращаемое значение:
//  ТекстОшибки - Строка - описание ошибки
//
Функция ДобавитьИзменитьЗапись(СтруктураЗаписи) Экспорт   
	
	ТекстОшибки = "";
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;	
	
	
	Если ТипЗнч(СтруктураЗаписи) <> Тип("Структура") Тогда
		
		ТекстОшибки = НСтр("ru = 'Запись не является Структурой'; en = 'Record is not a Structure'");		
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_НастройкиХраненияИстории");
		
		Возврат ТекстОшибки; 
		
	КонецЕсли;
	
	Если Не СтруктураЗаписи.Свойство("ТипДанных") Тогда 
		                                        
		ТекстОшибки = НСтр("ru = 'Отсутствует свойство ""ТипДанных""'; en = 'Data type property is missing'");
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_НастройкиХраненияИстории");
		
		Возврат ТекстОшибки;		
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтруктураЗаписи.ТипДанных) Тогда 
		                                        
		ТекстОшибки = НСтр("ru = 'Не заполнен ""ТипДанных""'; en = 'Data type not filled in'");
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_НастройкиХраненияИстории");
		
		Возврат ТекстОшибки;		
				
	КонецЕсли;
	
	Если Не СтруктураЗаписи.Свойство("ИмяОбъекта") Тогда 
		                                        
		ТекстОшибки = НСтр("ru = 'Отсутствует свойство ""ИмяОбъекта""'; en = 'Object name property is missing'");
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_НастройкиХраненияИстории");
		
		Возврат ТекстОшибки;		
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтруктураЗаписи.ИмяОбъекта) Тогда 
		                                        
		ТекстОшибки = НСтр("ru = 'Не заполнен ""ИмяОбъекта""'; en = 'Object name not filled in'");
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_НастройкиХраненияИстории");
		
		Возврат ТекстОшибки;		
				
	КонецЕсли;
		
	
	НаборЗаписей = РегистрыСведений.PAPI_НастройкиХраненияИстории.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.ТипДанных.Установить(СтруктураЗаписи.ТипДанных);
	НаборЗаписей.Отбор.ИмяОбъекта.Установить(СтруктураЗаписи.ИмяОбъекта);
	
	НаборЗаписей.Прочитать();
	
	МассивПолейРегистра = МассивПолейРегистра();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		НоваяЗаписьРегистра = НаборЗаписей.Добавить();  		
		
	Иначе //НаборЗаписей.Количество() > 0
				
		НоваяЗаписьРегистра = НаборЗаписей[0]; 	
				
	КонецЕсли;
	
	Попытка
		
		Для Каждого элМассива Из МассивПолейРегистра Цикл 
				
			Если СтруктураЗаписи.Свойство(элМассива) Тогда
				
				НоваяЗаписьРегистра[элМассива] = СтруктураЗаписи[элМассива];
					
			КонецЕсли	
			
		КонецЦикла;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("PAPIОтключитьПодпискуПередЗаписью");
		
		НаборЗаписей.Записать();
		
	Исключение

		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_НастройкиХраненияИстории");						
					
	КонецПопытки;
		
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;
	
	Возврат ТекстОшибки; 	
	
КонецФункции						   


// Чистим регистр 
//
// Параметры:
//  ТипДанных	- Строка - Пример: "Справочники"
//  ИмяОбъекта	- Строка - Пример: "Номенклатура"
//
Процедура УдалитьЗаписьРегистра(ТипДанных, ИмяОбъекта) Экспорт 
	
	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;						
	
	Попытка
			
		НаборЗаписей = РегистрыСведений.PAPI_НастройкиХраненияИстории.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.ТипДанных.Установить(ТипДанных);
		НаборЗаписей.Отбор.ИмяОбъекта.Установить(ИмяОбъекта);
		НаборЗаписей.Записать();   
		
 	Исключение

		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		PAPI_Логирование.ЗаписатьВЛог("PAPI.Ошибка", Перечисления.PAPI_ТипЛога.Ошибка, ТекстОшибки, "РегистрыСведений.PAPI_НастройкиХраненияИстории");						
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
	КонецЕсли;

КонецПроцедуры 

// Возвращает массив полей регистра
// 
// Возвращаемое значение:
//  Массив - Поля заполняемые при создании записи
//
Функция МассивПолейРегистра()
	
	МассивПолейРегистра = Новый Массив;  
	
	// Измерения
	МассивПолейРегистра.Добавить("ТипДанных");
	МассивПолейРегистра.Добавить("ИмяОбъекта");
	
	// Ресурсы
	МассивПолейРегистра.Добавить("СрокХранения");

	Возврат МассивПолейРегистра;
	
КонецФункции

// Возвращает структуру записи регистра "PAPI_ОшибкиОбработкиПослеЗаписиВерсий"
//
// Возвращаемое значение:
//  СтруктураРегистра - Структура:
//		ТипОбъекта		- Строка - Тип документа
//		ИмяОбъекта		- Строка - Уникальный идентификатор или навигационная ссылка
//		СрокХранения 	- ПеречислениеСсылка.PAPI_СрокиХранения - время хранения версий 
//
Функция ПолучитьСтруктуруПоУмолчанию() Экспорт
	
	СтруктураРегистра = Новый Структура;
	СтруктураРегистра.Вставить("ТипДанных", 		"");
	СтруктураРегистра.Вставить("ИмяОбъекта", 		"");
	СтруктураРегистра.Вставить("СрокХранения", 		Перечисления.PAPI_СрокиХранения.ПустаяСсылка());
		
	Возврат СтруктураРегистра;    
	
КонецФункции
